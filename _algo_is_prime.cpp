// AtCoder_Cpp.cpp : このファイルには 'main' 関数が含まれています。プログラム実行の開始と終了がそこで行われます。
//
// V - 2.05.再帰関数 (再帰関数の実装例)
// Nが素数であるかを判定する関数 is_prime
// 素数判定を行う方法にはもっと効率の良いものがあるので、ここで紹介した素数判定関数は実用的ではないことに注意してください。
// https://atcoder.jp/contests/apg4b/tasks/APG4b_v

#include <iostream>
#include <algorithm>
#include <vector>
// #include <bits/stdc++.h>
using namespace std;

// i ~ N-1の範囲にNの約数が存在するか
bool has_divisor(int N, int i) {
	// ベースケース1
	if (i == N - 1) {
		return (N % i == 0);
	}
	// ベースケース2
	if (N % i == 0) {
		// 実際にiはNの約数なので、i ~ N-1の範囲に約数が存在する
		return true;
	}

	// 再帰ステップ
	// i+1 ~ N-1の範囲の結果がi ~ N-1の範囲の結果となる
	// (ベースケース2によって、iがNの約数の場合は取り除かれているので、あとはi+1 ~ N-1の範囲を調べればよい)
	return has_divisor(N, i + 1);
}

bool is_prime(int N) {
	if (N == 1) {
		// 1は素数ではない
		return false;
	}
	else if (N == 2) {
		// 2は素数
		return true;
	}
	else {
		// 2~(N-1)の範囲に約数が無ければ、Nは素数
		return !has_divisor(N, 2);
	}
}

int main() {
	cout << is_prime(1) << endl;  // 0
	cout << is_prime(2) << endl;  // 1
	cout << is_prime(12) << endl; // 0
	cout << is_prime(13) << endl; // 1
	cout << is_prime(57) << endl; // 0
}

// プログラムの実行: Ctrl + F5 または [デバッグ] > [デバッグなしで開始] メニュー
// プログラムのデバッグ: F5 または [デバッグ] > [デバッグの開始] メニュー

// 作業を開始するためのヒント: 
//    1. ソリューション エクスプローラー ウィンドウを使用してファイルを追加/管理します 
//   2. チーム エクスプローラー ウィンドウを使用してソース管理に接続します
//   3. 出力ウィンドウを使用して、ビルド出力とその他のメッセージを表示します
//   4. エラー一覧ウィンドウを使用してエラーを表示します
//   5. [プロジェクト] > [新しい項目の追加] と移動して新しいコード ファイルを作成するか、[プロジェクト] > [既存の項目の追加] と移動して既存のコード ファイルをプロジェクトに追加します
//   6. 後ほどこのプロジェクトを再び開く場合、[ファイル] > [開く] > [プロジェクト] と移動して .sln ファイルを選択します
